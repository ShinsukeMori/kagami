//====================================================================================
//                       ExDict.h.acdi
//                            by Shinsuke MORI
//                            Last change : 1 November 1995
//====================================================================================

// 機  能 : NFA(AC 法による DFA)による外部辞書
//
// 注意点 : 出力データを主記憶に保持
//          遷移表は二次記憶のまま利用
//          MakeExDictAC.perl により生成されるデータを利用
//          子ノードの文字テーブルの幅の計算に以下の性質を利用(少々トリッキーだ)。
//              (number+1)/2*2 == ((number%2 == 0) ? number : number+1)


//------------------------------------------------------------------------------------
//                       define
//------------------------------------------------------------------------------------

#ifndef _ExDict_h
#define _ExDict_h

#ifdef DEBUG
#define ExDict_DEBUG
#endif
//#define ExDict_DEBUG


//------------------------------------------------------------------------------------
//                       include
//------------------------------------------------------------------------------------

#include <mystd.h>

#include "ExMorp.h"


//------------------------------------------------------------------------------------
//                       class ExDict
//------------------------------------------------------------------------------------

class ExDict{

  public:

             ExDict(const string&);

    void     init();

    void     tran(const W_CHAR);

    ExMorp_P lenpos();

    void     fprint(ostream&);                    // インスタンスの表示

  protected:

  private:

    U_INT4   curpos;                              // 現在のファイル上での位置

    ifstream states;                              // 状態遷移表ファイル

    ExMorp_P output;                              // 出力表

    void     readoutput(const string&);

};


//------------------------------------------------------------------------------------
//                       constractor
//------------------------------------------------------------------------------------

ExDict::ExDict(const string& filestem)
: states((filestem + ".actran" + EOS).c_str()), curpos(0)
{
    if (! states) openfailed(filestem + ".actran" + EOS);
    readoutput(filestem + ".acdata");
}


//------------------------------------------------------------------------------------
//                       readoutput
//------------------------------------------------------------------------------------

void ExDict::readoutput(const string& filename)
{
    ifstream file((filename + EOS).c_str());
    if (! file) openfailed(filename);
    file.seekg(0, ios::end);                      // ファイルサイズを取得する
    U_INT4 size = (U_INT4)file.tellg()/sizeof(ExMorp);
    file.seekg(0, ios::beg);
    output = new ExMorp[size];                    // 記憶領域の取得
    file.read((S_CHAR_P)output, size*sizeof(ExMorp));       // データの読み込み

    cerr << memalloced(size*sizeof(ExMorp)) << " for " << filename << endl;
}


//------------------------------------------------------------------------------------
//                       init
//------------------------------------------------------------------------------------

inline void ExDict::init()
{
    curpos = 0;
}


//------------------------------------------------------------------------------------
//                       tran
//------------------------------------------------------------------------------------

inline void ExDict::tran(const W_CHAR code)
{
#ifdef ExDict_DEBUG
    cerr << "ExDict::tran(code = " << code << ")" << endl;
#endif

    while (TRUE){                                 // ループは return により終了
        U_INT4 number;                            // 遷移が定義されている文字の数
        states.seekg(curpos+2*sizeof(U_INT4), ios::beg);
        states.read((S_CHAR_P)&number, sizeof(U_INT4));

// 文字 code の二分探索
        for (S_INT4 gauche = -1, droite = number, centre; gauche+1 < droite; ){
            centre = (gauche+droite)/2;           // 中心の更新
//            cerr << "(" << gauche << ", " << centre << ", " << droite << ")\n";

            W_CHAR nextwc;                        // 中心の位置に対応する文字
            states.seekg(curpos+3*sizeof(U_INT4)+centre*sizeof(W_CHAR), ios::beg);
            states.read((S_CHAR_P)&nextwc, sizeof(W_CHAR));
            if (nextwc < code){
//                cerr << nextwc << " < " << code << endl;
                gauche = centre;
                continue;
            }
            if (nextwc > code){
//                cerr << nextwc << " > " << code << endl;
                droite = centre;
                continue;
            }
//            cerr << nextwc << " == " << code << endl;
            states.seekg(curpos+3*sizeof(U_INT4)+(number+1)/2*2*sizeof(W_CHAR)
                         +centre*sizeof(U_INT4), ios::beg);
            states.read((S_CHAR_P)&curpos, sizeof(U_INT4)); // 遷移
            return;
        }

        U_INT4 fail;                              // フェイルポインタ
        states.seekg(curpos+sizeof(U_INT4), ios::beg);
        states.read((S_CHAR_P)&fail, sizeof(U_INT4));

        if (curpos == fail) return;               // 無限ループの回避
        curpos = fail;                            // 遷移
    }
}


//------------------------------------------------------------------------------------
//                       lenpos
//------------------------------------------------------------------------------------

inline ExMorp_P ExDict::lenpos()
{
    U_INT4 offset;                                // 状態に対応する output の相対位置
    states.seekg(curpos, ios::beg);
    states.read((S_CHAR_P)&offset, sizeof(U_INT4));

    return(ExMorp_P(U_CHAR_P(output)+offset));
}


//------------------------------------------------------------------------------------
//                       fprint
//------------------------------------------------------------------------------------

void ExDict::fprint(ostream& fout = cout)
{
//     for (U_INT4 suf1 = 0; suf1 < size; suf1++){
//         U_INT4 offset = (U_INT1_P)states[suf1].data-(U_INT1_P)output;
//         fout << "------- state = " << setw(2) << hex << suf1 << ", ";
//         fout << "output = " << setw(4) << hex << offset << endl;
//         for (U_INT4 suf2 = 1; suf2 < 0x60; suf2++){
//             offset = (U_INT1_P)states[suf1].next[suf2]-(U_INT1_P)states;
//             fout << "next[" << setw(2) << hex << suf2 << "] = ";
//             fout << setw(4) << hex << offset << endl;
//         }
//     }
}


//------------------------------------------------------------------------------------
//                       endif
//------------------------------------------------------------------------------------

#endif


//====================================================================================
//                       END
//====================================================================================
