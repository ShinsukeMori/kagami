//====================================================================================
//                       ExDict.h.dadi
//                            by Shinsuke MORI
//                            Last change : 1 November 1995
//====================================================================================

// 機  能 : DFA による外部辞書
//
// 注意点 : 遷移表と出力データの両方を主記憶に保持
//          MakeExDictDA.perl により生成されるデータを利用


//------------------------------------------------------------------------------------
//                       define
//------------------------------------------------------------------------------------

#ifndef _ExDict_h
#define _ExDict_h

#ifdef DEBUG
#define ExDict_DEBUG
#endif
//#define ExDict_DEBUG


//------------------------------------------------------------------------------------
//                       include
//------------------------------------------------------------------------------------

#include <mystd.h>

#include "ExMorp.h"


//------------------------------------------------------------------------------------
//                       class ExDFAState
//------------------------------------------------------------------------------------

class ExDFAState;
typedef ExDFAState* ExDFAState_P;

class ExDFAState{

friend class ExDict;

  public:

    ExDFAState_P operator[](const U_INT1);

    ExMorp_P output();                            // 出力形態素列

  protected:

  private:

    ExDFAState_P next[0x60];                        // 遷移関数表

};


//------------------------------------------------------------------------------------
//                       operator[]
//------------------------------------------------------------------------------------

inline ExDFAState_P ExDFAState::operator[](const U_INT1 code)
{
    return(next[code]);
}


//------------------------------------------------------------------------------------
//                       output()
//------------------------------------------------------------------------------------

inline ExMorp_P ExDFAState::output()
{
    return(ExMorp_P(next[0]));
}


//------------------------------------------------------------------------------------
//                       class ExDict
//------------------------------------------------------------------------------------

class ExDict{

  public:

                 ExDict(const string&);

    void         init();

    void         tran(const W_CHAR);

    ExMorp_P     lenpos() const;

    void         fprint(ostream&);                // インスタンスの表示

  protected:

  private:

    U_INT4       size;                            // 状態の数

    ExDFAState_P curpos;                          // 現在の位置

    ExDFAState_P states;                          // 状態遷移表

    ExMorp_P     output;                          // 出力表

    void         readoutput(const string&);       // 出力表の読み込み

    void         readstates(const string&);       // 状態遷移表の読み込み

};


//------------------------------------------------------------------------------------
//                       constructor
//------------------------------------------------------------------------------------

ExDict::ExDict(const string& filestem)
{
    readoutput(filestem + ".dadata");
    readstates(filestem + ".datran");
    curpos = states;
}


//------------------------------------------------------------------------------------
//                       readoutput
//------------------------------------------------------------------------------------

void ExDict::readoutput(const string& filename)
{
    ifstream file(filename.c_str());
    if (! file) openfailed(filename);
    file.seekg(0, ios::end);                      // ファイルサイズを取得する
    U_INT4 size = (U_INT4)file.tellg()/sizeof(ExMorp);
    file.seekg(0, ios::beg);
    output = new ExMorp[size];                    // 記憶領域の取得
    file.read(S_CHAR_P(output), size*sizeof(ExMorp));       // データの読み込み

    cerr << memalloced(size*sizeof(ExMorp)) << " for " << filename << endl;
}


//------------------------------------------------------------------------------------
//                       readstates
//------------------------------------------------------------------------------------

void ExDict::readstates(const string& filename)
{
    ifstream file(filename.c_str());
    if (! file) openfailed(filename);
    file.seekg(0, ios::end);                      // ファイルサイズを取得する
    size = (U_INT4)file.tellg()/sizeof(ExDFAState);
    file.seekg(0, ios::beg);
    states = new ExDFAState[size];                // 記憶領域の取得
    cerr << memalloced(size*sizeof(ExDFAState)) << " for " << filename << endl;

    for (U_INT4 offset, i = 0; i < size; i++){
        file.read(S_CHAR_P(&offset), sizeof(offset));       // データの読み込み
        states[i].next[0] = (ExDFAState_P)((U_INT1_P)output+offset); // 出力関数
        for (U_INT4 j = 1; j < 0x60; j++){
            file.read(S_CHAR_P(&offset), sizeof(offset));   // データの読み込み
            states[i].next[j] = (ExDFAState_P)((U_INT1_P)states+offset); // 遷移関数
        }
    }
}


//------------------------------------------------------------------------------------
//                       init
//------------------------------------------------------------------------------------

inline void ExDict::init()
{
    curpos = states;
}


//------------------------------------------------------------------------------------
//                       tran
//------------------------------------------------------------------------------------

inline void ExDict::tran(const W_CHAR code)
{
#ifdef ExDict_DEBUG
    cerr << "ExDict::tran(code = " << code << ")" << endl;
#endif

    curpos = (*curpos)[code.half.hi^0xff];
    curpos = (*curpos)[code.half.lo^0xff];
}


//------------------------------------------------------------------------------------
//                       lenpos
//------------------------------------------------------------------------------------

inline ExMorp_P ExDict::lenpos() const
{
#ifdef ExDict_DEBUG
    cerr << "ExDict::lenpos" << endl;
#endif

    return((*curpos).output());
}


//------------------------------------------------------------------------------------
//                       fprint
//------------------------------------------------------------------------------------

void ExDict::fprint(ostream& fout = cout)
{
//     for (U_INT4 suf1 = 0; suf1 < size; suf1++){
//         U_INT4 offset = (U_INT1_P)states[suf1].data-(U_INT1_P)output;
//         fout << "------- state = " << setw(2) << hex << suf1 << ", ";
//         fout << "output = " << setw(4) << hex << offset << endl;
//         for (U_INT4 suf2 = 1; suf2 < 0x60; suf2++){
//             offset = (U_INT1_P)states[suf1].next[suf2]-(U_INT1_P)states;
//             fout << "next[" << setw(2) << hex << suf2 << "] = ";
//             fout << setw(4) << hex << offset << endl;
//         }
//     }
}


//------------------------------------------------------------------------------------
//                       endif
//------------------------------------------------------------------------------------

#endif


//====================================================================================
//                       END
//====================================================================================
